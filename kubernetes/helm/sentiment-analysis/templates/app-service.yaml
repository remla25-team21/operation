# define deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appService.name }}
  labels:
    app: {{ .Values.appService.name }}
spec:
  replicas: {{ .Values.appService.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-{{ .Values.appService.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.appService.name }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "{{ .Values.appService.service.port }}"
    spec:
      containers:
      - name: {{ .Values.appService.name }}
        image: {{ .Values.appService.image.repository }}:{{ .Values.appService.image.tag }}
        imagePullPolicy: {{ .Values.appService.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.appService.service.port }}
          name: http
          protocol: TCP
        envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-app-configmap
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.appService.service.port }}
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
---
# define service
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.appService.name }}
  labels:
    app: {{ .Values.appService.name }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "{{ .Values.appService.service.port }}"
spec:
  selector:
    app: {{ .Release.Name }}-{{ .Values.appService.name }}
  ports:
    - port: {{ .Values.appService.service.port }}
      targetPort: {{ .Values.appService.service.port }}
      name: http
      protocol: TCP
  type: {{ .Values.appService.service.type }}
